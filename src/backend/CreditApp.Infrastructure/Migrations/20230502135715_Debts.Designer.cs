// <auto-generated />
using System;
using CreditApp.Infrastructure.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CreditApp.Infrastructure.Migrations
{
    [DbContext(typeof(CreditAppContext))]
    [Migration("20230502135715_Debts")]
    partial class Debts
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CreditApp.Domain.CreditEntities.CreditApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Credits")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IncomeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCreditCorp")
                        .HasColumnType("bit");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OutflowId")
                        .HasColumnType("int");

                    b.Property<int>("RequestTime")
                        .HasColumnType("int");

                    b.Property<decimal>("RequestedValue")
                        .HasColumnType("money");

                    b.Property<int>("Stade")
                        .HasColumnType("int");

                    b.Property<int>("TypeCreditEnum")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IncomeId");

                    b.HasIndex("OutflowId");

                    b.HasIndex("UserId");

                    b.ToTable("CreditApplications");
                });

            modelBuilder.Entity("CreditApp.Domain.CreditEntities.Debt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreditApplicationId")
                        .HasColumnType("int");

                    b.Property<double>("DebtBalance")
                        .HasColumnType("float");

                    b.Property<string>("NameEntity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("QuotaValue")
                        .HasColumnType("float");

                    b.Property<int>("TimeRemainingPayment")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreditApplicationId");

                    b.ToTable("Debts");
                });

            modelBuilder.Entity("CreditApp.Domain.CreditEntities.OtherIncome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Concept")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IncomeId")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("IncomeId");

                    b.ToTable("OtherIncomes");
                });

            modelBuilder.Entity("CreditApp.Domain.DocumentEntities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreditApplicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<int>("TypeDocument")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreditApplicationId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("CreditApp.Domain.UserEntities.Income", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("NetTithes")
                        .HasColumnType("float");

                    b.Property<double>("Pension")
                        .HasColumnType("float");

                    b.Property<double>("Placement")
                        .HasColumnType("float");

                    b.Property<double>("RentsReceived")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("CreditApp.Domain.UserEntities.Outflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BankCreditCardFees")
                        .HasColumnType("float");

                    b.Property<double>("Diet")
                        .HasColumnType("float");

                    b.Property<double>("Education")
                        .HasColumnType("float");

                    b.Property<double>("LoanInstallmentCorp")
                        .HasColumnType("float");

                    b.Property<double>("OtherFees")
                        .HasColumnType("float");

                    b.Property<double>("OtherObligations")
                        .HasColumnType("float");

                    b.Property<double>("PublicServices")
                        .HasColumnType("float");

                    b.Property<double>("Renting")
                        .HasColumnType("float");

                    b.Property<double>("Transport")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Outflows");
                });

            modelBuilder.Entity("CreditApp.Domain.UserEntities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Childrens")
                        .HasColumnType("int");

                    b.Property<string>("Congregation")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("DateInitCorp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInitMin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("District")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("DocumentId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EPS")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<string>("LandLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastNames")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("MunicipalityId")
                        .HasColumnType("int");

                    b.Property<string>("Names")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Persons")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<int>("TypeUser")
                        .HasColumnType("int");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.Property<string>("WifeLastNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WifeNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WifePhone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Admin@gmail.com",
                            LastNames = "Admin",
                            Names = "Admin",
                            Password = "356a192b7913b04c54574d18c28d46e6395428ab",
                            TypeUser = 0
                        });
                });

            modelBuilder.Entity("CreditApp.Domain.CreditEntities.CreditApplication", b =>
                {
                    b.HasOne("CreditApp.Domain.UserEntities.Income", "Income")
                        .WithMany()
                        .HasForeignKey("IncomeId");

                    b.HasOne("CreditApp.Domain.UserEntities.Outflow", "Outflow")
                        .WithMany()
                        .HasForeignKey("OutflowId");

                    b.HasOne("CreditApp.Domain.UserEntities.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Income");

                    b.Navigation("Outflow");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CreditApp.Domain.CreditEntities.Debt", b =>
                {
                    b.HasOne("CreditApp.Domain.CreditEntities.CreditApplication", null)
                        .WithMany("DebtsList")
                        .HasForeignKey("CreditApplicationId");
                });

            modelBuilder.Entity("CreditApp.Domain.CreditEntities.OtherIncome", b =>
                {
                    b.HasOne("CreditApp.Domain.UserEntities.Income", null)
                        .WithMany("OtherIncomes")
                        .HasForeignKey("IncomeId");
                });

            modelBuilder.Entity("CreditApp.Domain.DocumentEntities.Document", b =>
                {
                    b.HasOne("CreditApp.Domain.CreditEntities.CreditApplication", null)
                        .WithMany("Documents")
                        .HasForeignKey("CreditApplicationId");
                });

            modelBuilder.Entity("CreditApp.Domain.CreditEntities.CreditApplication", b =>
                {
                    b.Navigation("DebtsList");

                    b.Navigation("Documents");
                });

            modelBuilder.Entity("CreditApp.Domain.UserEntities.Income", b =>
                {
                    b.Navigation("OtherIncomes");
                });

            modelBuilder.Entity("CreditApp.Domain.UserEntities.User", b =>
                {
                    b.Navigation("Applications");
                });
#pragma warning restore 612, 618
        }
    }
}
